#
# -*- coding: utf-8 -*-
"""firmata_test_3_18_19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15TGmCmLTn5gkujUXdemXobQZoy_62WtO
"""

import sys
import warnings
warnings.filterwarnings('ignore')
import math as math

from pyfirmata import ArduinoMega, util
import inputs
import time
import pygame


            

class Rover(object):
    """Create a rover object based on a pin map
    """
    def __init__(self, port, forward, reverse):
        """Return new rover object.
        analog pins will be pin numbers w/o A
        """
        self.port = port
        #self.f = forward
        #self.r = reverse
        self.currentPwm = 0;
        self.startTime = 0;
        self.currentTime = 0;
        self.flippedDirection = False;

    def setDriveSpeed(self, speed):
        if speed > 0:
            self.MAN1.write(1.0);
            self.MAN2.write(0.0);
        else:
            self.MAN1.write(0.0);
            self.MAN2.write(1.0);

    def drive(self, speed):
        if speed == 0:
            self.MAN1.write(0.0)
            self.MAN2.write(0.0)
            return

        if not self.flippedDirection and speed * self.currentPwm < 0:
            self.startTime = time.time()
            self.flippedDirection = True
            self.MAN1.write(0.0)
            self.MAN2.write(0.0)            

        self.currentTime = time.time()

        if not self.flippedDirection:
            self.setDriveSpeed(speed)
            self.currentPwm = speed
        elif self.currentTime - self.startTime > 1:
            self.setDriveSpeed(speed)
            self.currentPwm = speed
            self.flippedDirection = False

        
    def set_port_pins(self):
        board = ArduinoMega(self.port)
        """
        the firmata pin methods take a string
        """
        # forward = 'd:'+str(labrat.f)+':p'
        # reverse = 'd:'+str(labrat.r)+':p'
        # self.pinForward = board.get_pin(forward)
        # self.pinReverse = board.get_pin(reverse)
        
        self.MAN1 = board.get_pin("d:3:p")
        self.MAN2 = board.get_pin("d:5:p")

        #self.pause = board.pass_time(5)

labrat = Rover('/dev/ttyACM0',3,5)

labrat.set_port_pins()

def joystick(rover):
    while True:
        events = inputs.get_gamepad()
        for event in events:
            print (#'event.ev_type',event.ev_type, 
                'event.code',event.code, '\tevent.state',event.state)
            """
            directional pad up is forward, let off direction pad is stop
           
            """
            if event.code == 'ABS_Y' and event.state == 0:
                rover.drive(20)
            if event.code == 'ABS_Y' and event.state == 255:
                rover.drive(-20)
            if event.code == 'ABS_Y' and event.state == 127:    
                labrat.drive(0)
                
            # if event.code == 'ABS_Y' and event.state == 0:
            #     rover.pinForward.write(.2)
            # if event.code == 'ABS_Y' and event.state ==127:
            #     rover.pinForward.write(0)
            # if event.code == 'ABS_Y' and event.state == 255:
            #     #time.sleep(5)
            #     #rover.pause
            #     rover.pinForward.write(.2)
            # if event.code == 'ABS_Y' and event.state ==127:
            #     rover.pinForward.write(0)

joystick(labrat)

